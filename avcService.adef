sandboxed: false

// start: manual

executables:
{
    avcDaemon = ( avcDaemon )
}

bundles:
{
    file:
    {
        [x] avcStart.sh /bin/
        [r] assets.cfg  /cfg/
    }
}

processes:
{
    run:
    {
        (avcStart.sh)
    }

    faultAction: restart
}

extern:
{
    avcDaemon.avcDaemon.le_avc
    avcDaemon.avcDaemon.le_avdata
}

requires:
{
    configTree:
    {
        [w] system
        [w] .
    }
}

bindings:
{
    avcDaemon.avcDaemon.le_instStat -> <root>.le_instStat
    avcDaemon.avcDaemon.le_appCtrl -> <root>.le_appCtrl
    avcDaemon.avcDaemon.le_appRemove -> <root>.le_appRemove
    avcDaemon.avcDaemon.le_appInfo -> <root>.le_appInfo
    avcDaemon.avcDaemon.le_update -> <root>.le_update
    avcDaemon.avcDaemon.le_data -> dataConnectionService.le_data
    avcDaemon.avcDaemon.le_fs -> fsService.le_fs
    avcDaemon.avcDaemon.le_fwupdate -> fwupdateService.le_fwupdate
    avcDaemon.avcDaemon.le_info -> modemService.le_info
    avcDaemon.avcDaemon.le_mdc  -> modemService.le_mdc
    avcDaemon.avcDaemon.le_mrc  -> modemService.le_mrc
    avcDaemon.avcDaemon.le_rtc  -> modemService.le_rtc
    avcDaemon.avcDaemon.le_sim  -> modemService.le_sim
    avcDaemon.avcDaemon.le_temp -> modemService.le_temp
    avcDaemon.avcDaemon.le_pos -> positioningService.le_pos
    avcDaemon.avcDaemon.le_gnss -> positioningService.le_gnss
    avcDaemon.avcDaemon.secStoreGlobal -> secStore.secStoreGlobal
}
